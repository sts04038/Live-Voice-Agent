# .github/workflows/build-and-push.yml

# 워크플로우의 이름
name: Build and Push Docker Images to GCP Artifact Registry

# 이 워크플로우가 언제 실행될지 지정
on:
  push:
    branches:
      - devops  # 'devops' 브랜치에 push될 때마다 실행

# 환경 변수 설정 (재사용을 위해)
env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GAR_LOCATION: asia-northeast3  # Artifact Registry를 생성한 지역 (예: 서울)
  BACKEND_SERVICE_NAME: live-voice-agent-backend
  FRONTEND_SERVICE_NAME: live-voice-agent-frontend

# 실행될 작업(들)을 정의
jobs:
  build-and-push:
    # 작업 이름
    name: Build and Push to GAR
    # 실행 환경
    runs-on: ubuntu-latest
    
    # 이 작업에 필요한 권한 설정
    permissions:
      contents: read
      id-token: write

    # 실제 작업 단계들
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Google Cloud에 인증 (우리가 등록한 비밀 키 사용)
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # 3. Google Cloud SDK 설정
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # 4. Docker가 Artifact Registry에 접근할 수 있도록 인증 설정
      - name: Configure Docker
        run: gcloud auth configure-docker ${{ env.GAR_LOCATION }}-docker.pkg.dev

      # 5. 백엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push Backend image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}/image:latest ./backend
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.BACKEND_SERVICE_NAME }}/image:latest

      # 6. 프론트엔드 Docker 이미지 빌드 및 푸시
      - name: Build and push Frontend image
        run: |
          docker build -t ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_SERVICE_NAME }}/image:latest ./frontend
          docker push ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.FRONTEND_SERVICE_NAME }}/image:latest